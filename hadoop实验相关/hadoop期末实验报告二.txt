MapReduce 的 "Hello World"
1.实验目的
熟悉mapreduce的原理，会写mapreduce方法。
2.MapReduce概述
MapReduce是一种分布式计算模型，由Google提出，主要用于搜索领域，解决海量数据的计算问题.
MR由两个阶段组成：Map和Reduce，用户只需要实现map()和reduce()两个函数，即可实现分布式计算，非常简单。
这两个函数的形参是key、value对，表示函数的输入信息。
3.执行步骤：
 1. map任务处理
1.1 读取输入文件内容，解析成key、value对。对输入文件的每一行，解析成key、value对。每一个键值对调用一次map函数。
1.2 写自己的逻辑，对输入的key、value处理，转换成新的key、value输出。
1.3 对输出的key、value进行分区。
1.4 对不同分区的数据，按照key进行排序、分组。相同key的value放到一个集合中。
1.5 (可选)分组后的数据进行归约。
2.reduce任务处理
2.1 对多个map任务的输出，按照不同的分区，通过网络copy到不同的reduce节点。
2.2 对多个map任务的输出进行合并、排序。写reduce函数自己的逻辑，对输入的key、value处理，转换成新的key、value输出。
2.3 把reduce的输出保存到文件中。
例子：实现WordCount
3.WordCount原理
Map、Reduce函数的输入输出都是key-value
实验：
计算单词出现的个数
words.txt
hello tom
hello jerry
hello kitty
hello world
hello tom

新建一个工程，导入相关jar包，再新建三个类，分别是WordCount.java、WCMapper.java和WCReducer.java，接下来讲解MapReduce的执行过程以及伪代码。
在进行Map之前，根据每行解析成一个key-value的键值对（其中key是字符的偏移量），如图所示：
<0, "hello tom">
<10, "hello jerry">
<22, "hello kitty">
<34, "hello world">
<46, "hello tom">

//伪代码
map（）{
//读取每一行
//0
int key = k1
//"hello tom"
String value = v1;
String[] words = value.split(" ");//分割字符
for(String w : words){
	context.write(w,1); //出现一次记做一次1			
  }
}

在执行reduce之前，要完成Shuffle功能，比如分区、排序、分组等，然后按照字典顺序输出。比如上述实例，输出的结果是：
<hello, {1,1,1,1,1}>
<jerry, {1}>
<kitty, {1}>
<tom, {1,1}>
<world, {1}>

//进行计数
reduce（）{
  String key = k2;
  int counter = 0;
  for (int i : v2s){
     counter += i;	  
  }
  counter.write(key,counter)

}

